ANSI C grammar, Lex specification
In 1985, Jeff Lee published this Lex specification together with a Yacc grammar for the April 30, 1985 ANSI C draft.  Tom Stockfisch reposted both to net.sources in 1987; that original, as mentioned in the answer to question 17.25 of the comp.lang.c FAQ, can be ftp'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as possible; please let me know if you discover discrepancies.

Jutta Degener, 1995


D			[0-9]
L			[a-zA-Z_]
H			[a-fA-F0-9]
E			[Ee][+-]?{D}+
FS			(f|F|l|L)
IS			(u|U|l|L)*

%{
#include <stdio.h>
#include "y.tab.h"

void count();
%}

%%
"/*"			{ comment(

'AUTO',
'BREAK',
'CASE',
'CHAR',
'CONST',
'CONTINUE',
'DEFAULT',
'DO',
'DOUBLE',
'ELSE',
'ENUM',
'EXTERN',
'FLOAT',
'FOR',
'GOTO',
'IF',
'INT',
'LONG',
'REGISTER',
'RETURN',
'SHORT',
'SIGNED',
'SIZEOF',
'STATIC',
'STRUCT',
'SWITCH',
'TYPEDEF',
'UNION',
'UNSIGNED',
'VOID',
'VOLATILE',
'WHILE'




{L}({L}|{D}    )'check_type()

0[xX]{H}+{IS    )'CONSTANT
0{D}+{IS    )'CONSTANT
{D}+{IS    )'CONSTANT
L?'(\\.|[^\\']    )'CONSTANT

{D}+{E}{FS    )'CONSTANT
{D}*'CONSTANT
{D}+'CONSTANT

L?\'STRING_LITERAL

'ELLIPSIS',
'RIGHT_ASSIGN',
'LEFT_ASSIGN',
'ADD_ASSIGN',
'SUB_ASSIGN',
'MUL_ASSIGN',
'DIV_ASSIGN',
'MOD_ASSIGN',
'AND_ASSIGN',
'XOR_ASSIGN',
'OR_ASSIGN',
'RIGHT_OP',
'LEFT_OP',
'INC_OP',
'DEC_OP',
'PTR_OP',
'AND_OP',
'OR_OP',
'LE_OP',
'GE_OP',
'EQ_OP',
'NE_OP'
'';'
(''{'
(''}'
'','
'':'
''='
''('
'
(''['
('']'
''.'
''&'
''!'
''~'
''-'
''+'
''*'
''/'
''%'
''<'
''>'
''^'
''|'
''?'

[ \t\v\n\f]		{ count(
.			{ /* ignore bad characters */ }

%%

yywrap()
{
	1);
}


comment()
{
	char c, c1;

loop:
	while ((c = input()) != '*' && c != 0)
		putchar(c);

	if ((c1 = input()) != '/' && c != 0)
	{
		unput(c1);
		goto loop;
	}

	if (c != 0)
		putchar(c1);
}


int column = 0;

void count()
{
	int i;

	for (i = 0; yytext[i] != '\0'; i++)
		if (yytext[i] == '\n')
			column = 0;
		else if (yytext[i] == '\t')
			column += 8 - (column % 8);
		else
			column++;

	ECHO;
}


int check_type()
{
/*
* pseudo code --- this is what it should check
*
*	if (yytext == type_name)
*		TYPE_NAME);
*
*	IDENTIFIER);
*/

/*
*	it actually will only return IDENTIFIER
*/

	IDENTIFIER);
}





'BREAK',
'BYTE',
'CASE',
'CATCH',
'CLASS',
'CONST',
'CONTINUE',
'DEFAULT',
'DO',
'ELSE',
'ENUM',
'EXTENDS',
'FINAL',
'FINALLY',
'FOR',
'IF',
'IMPLEMENTS',
'IMPORT',
'INSTANCEOF',
'INTERFACE',
'NEW',
'PACKAGE',
'RETURN',
'STATIC',
'SUPER',
'SWITCH',
'THIS',
'THROW',
'THROWS',
'TRY',
'WHILE',
'NULL',
'LAMBDA' 